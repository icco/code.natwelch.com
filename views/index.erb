<!doctype html>
<html>
  <head>
    <title>Nat's Code History</title>

    <link type="text/css" rel="stylesheet" href="style.css" />

    <script src="http://d3js.org/d3.v2.js"></script>
  </head>
  <body>

    <div id="chart">
      <script type="text/javascript">

        // Date formatter function
        var parse = d3.time.format("%Y-%m-%d %H:%M:%S").parse;

        // Chart dimensions
        var m = [80, 80, 80, 80]; // Margins
        var w = 960 - m[1] - m[3];
        var h = 500 - m[0] - m[2];

        // Scales. Nice functions which auto resize things.
        // Also defines the ranges for the graph (top and bottom numbers)
        var x = d3.time.scale().range([0, w]);
        var y = d3.scale.linear().range([h, 0]);
        var base_color = "#1F78B4";
        var colors = d3.scale.ordinal().range([
          d3.rgb(base_color).brighter(),
          d3.rgb(base_color),
          d3.rgb(base_color).darker(),
        ]);

        var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(true);
        var yAxis = d3.svg.axis().scale(y).ticks(4).orient("right");

        // An area generator, for the light fill.
        // TODO(icco): Figure htf this works...
        var area = d3.svg.area()
          .interpolate("linear")
          .x(function(d)  { return x(d.x) })
          .y0(function(d) { return y(d.y) })
          .y1(function(d) { return y(0) });

        // The minified js import at the top gives us all of the d3 plugins. FOR FREE!
        d3.csv("/data.csv", function(data) {
            var names = ["repos", "forks", "watchers"];
            var values = d3.layout.stack()(names.map(function(kind) {
              return data.map(function(d) {
                return { x: parse(d.date), y: +d[kind] };
              });
            }));

            console.log(values);
            console.log(data);

            // Compute the minimum and maximum date, and the maximum y value.
            x.domain([parse(data[0].date), parse(data[data.length - 1].date)]);
            y.domain([0, d3.max(data, function(d) { return Math.max(d.forks, d.watchers, d.repos); })]).nice();

            // Add an SVG element with the desired dimensions and margin.
            var svg = d3.select("#chart").append("svg:svg")
              .attr("width", w + m[1] + m[3])
              .attr("height", h + m[0] + m[2])
              .append("svg:g")
              .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

            // Add the clip path.
            svg.append("svg:clipPath")
              .attr("id", "clip")
              .append("svg:rect")
              .attr("width", w)
              .attr("height", h);

            // Add the x-axis.
            svg.append("svg:g")
              .attr("class", "x axis")
              .attr("transform", "translate(0," + h + ")")
              .call(xAxis);

            // Add the y-axis.
            svg.append("svg:g")
              .attr("class", "y axis")
              .attr("transform", "translate(" + w + ",0)")
              .call(yAxis);

            svg.selectAll("g.generator")
              .data(values)
              .enter().append("svg:path")
              .attr("class", "generator")
              .style("fill",   function(d, i) { return d3.rgb(colors(i)) })
              .style("fill-opacity", .5)
              .style("stroke", function(d, i) { return d3.rgb("#000000").darker() })
              .attr("clip-path", "url(#clip)")
              .attr("d", area);

            // Add a small label for the name.
            svg.append("svg:text")
              .attr("x", w - 6)
              .attr("y", h - 6)
              .attr("text-anchor", "end")
              .text("github.com/icco");
        });
      </script>
    </div>
  </body>
</html>
