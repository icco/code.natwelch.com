<!doctype html>
<html>
  <head>
    <title>Nat's Code History</title>
    <link type="text/css" rel="stylesheet" href="style.css" />
  </head>
  <body>
    <script src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
    <script src="http://d3js.org/d3.v2.min.js"></script>
    <div id="paired-line-chart">
      <script type="text/javascript">

        // The minified js import at the top gives us all of the d3 plugins. FOR FREE!
        d3.csv("/data.csv", function(csv_rows) {

            // Alright. We have csv_rows with date,repos,forks,watchers
            // date will always be x, the other three will be y
            var size = csv_rows.length;

            // This creates a function to pass in a js date.
            var dateFormat = d3.time.format("%Y-%m-%d");

            // We're going to need to know the largest Y value.
            var maxval = 0;
            for (var i = 0; i < size; i++) {
              maxval = Math.max(maxval, csv_rows[i].watchers, csv_rows[i].forks, csv_rows[i].repos);
            }

            // Chart dimensions
            var w = 815;
            var h = 500;
            var p = 50; // Padding

            // Scales. Nice functions which auto resize things.
            // Also defines the ranges for the graph (top and bottom numbers)
            var x = d3.time.scale().domain([ new Date(csv_rows[0].x), new Date(csv_rows[size-1].x) ]).range([0 + p, w - p]);
            var y = d3.scale.linear().domain([0, maxval]).range([h, 0]);

            // This defines the actual visualization box.
            var vis = d3.select("#paired-line-chart")
              .data(csv_rows)
              .append("svg:svg")
              .attr("width", w + p * 2)
              .attr("height", h + p * 2)
              .append("svg:g")
              .attr("transform", "translate(" + p + "," + p + ")");

            var rules = vis.selectAll("g.rule")
              .data(x.ticks(15))
              .enter().append("svg:g")
              .attr("class", "rule");

            // Draw grid lines
            rules.append("svg:line")
              .attr("x1", x)
              .attr("x2", x)
              .attr("y1", 0)
              .attr("y2", h - 1);

            rules.append("svg:line")
              .attr("class", function(d) { return d ? null : "axis"; })
              .data(y.ticks(10))
              .attr("y1", y)
              .attr("y2", y)
              .attr("x1", 0)
              .attr("x2", w - 10);

            // Place axis tick labels
            rules.append("svg:text")
              .attr("x", x)
              .attr("y", h + 15)
              .attr("dy", ".71em")
              .attr("text-anchor", "middle");

            rules.append("svg:text")
              .data(y.ticks(12))
              .attr("y", y)
              .attr("x", -10)
              .attr("dy", ".35em")
              .attr("text-anchor", "end")
              .text(y.tickFormat(5));

            // Series I
            vis.append("svg:path")
              .attr("class", "line")
              .attr("fill", "none")
              .attr("stroke", "maroon")
              .attr("stroke-width", 2)
              .attr("d", d3.svg.line()
                  .x(function(d) { return x(new Date(d.date)); })
                  .y(function(d) { return y(d.repos); }));

            vis.selectAll("circle.line")
              .data(csv_rows)
              .enter().append("svg:circle")
              .attr("class", "line")
              .attr("fill", "maroon" )
              .attr("cy", function(d) { return y(d.repos); })
              .attr("r", 1);
        });
      </script>
    </div>
  </body>
</html>
